#!/usr/bin/env python3

import argparse
import hashlib
import hmac
import os
import sys

class Ledger(object):
  INIT_HASH_BYTES = 64
  __slots__ = ["io_loader", "io", "hashfn"]
  def __init__(self, io_loader, hashfn):
    self.io_loader = io_loader
    self.io = None
    self.hashfn = hashfn

  def create(self, content=None):
    if content is None:
      content = os.urandom(64)
    first = LedgerEntry(b"\x00" * Ledger.INIT_HASH_BYTES, content)
    # Open io in exclusive mode.
    self.__io(create=True).write(first.serialize())

  def append(self, new_content, hmac_secret=None):
    io = self.__io()
    # No need to seek here, because LedgerEntry.last_from_stream will seek to the end.
    last_entry = LedgerEntry.last_from_stream(io)
    entry = LedgerEntry(self.__hash_entry(last_entry, hmac_secret), new_content)
    io.write(entry.serialize())

  def validate(self, hmac_secret=None):
    # The io loader passed is assumed to be at the start of the io source if not seekable
    io = self.__io()
    if io.seekable():
      io.seek(0, 0) # start of file
    errors = [] # contains pairs of entries that have errors
    last_entry = None
    last_hash = b"\x00" * Ledger.INIT_HASH_BYTES
    for entry in LedgerIterator(io):
      if not hmac.compare_digest(last_hash, entry.prev_hash):
        errors.append((last_entry, entry))

      # move the last entries
      last_entry = entry
      last_hash = self.__hash_entry(entry, hmac_secret)

    return errors

  def __io(self, create=False):
    if create and self.io:
      raise AssertionError("IO Source already initialized!")
    if not self.io:
      options = "r+b"
      if create:
        options = "x+b"
      self.io = self.io_loader(options)
    return self.io

  def __hash_entry(self, entry, hmac_secret):
    buf = entry.serialize()
    if self.hashfn == "sha":
      return hashlib.sha512(buf).digest()
    elif self.hashfn == "hmac":
      if not hmac_secret:
        raise ValueError("No hmac secret provided!")
      return hmac.new(hmac_secret, buf, "sha512").digest()
    else:
      raise ValueError("No such hash type: %s" % self.hashfn)


class LedgerIterator(object):
  __slots__ = ["stream"]
  def __init__(self, iostream):
    self.stream = iostream

  def __iter__(self):
    return self

  def __next__(self):
    entry = LedgerEntry.from_stream(self.stream)
    if entry is None:
      raise StopIteration()
    return entry


class LedgerEntry(object):
  __slots__ = ["length", "hash_length", "prev_hash", "content"]
  # Number of bytes used to store the length
  LENGTH_FIXED_STORAGE = 4 # 4 bytes for fixed storage fields -> 32bit
  COUNT_OF_FIXED_FIELDS = 3 # 3 fields that have 32bit size
  FIXED_STORAGE_SIZE = LENGTH_FIXED_STORAGE * COUNT_OF_FIXED_FIELDS

  def __init__(self, prev_hash, content):
    self.prev_hash = prev_hash
    self.content = content
    self.hash_length = len(prev_hash)
    self.length = len(content) + LedgerEntry.LENGTH_FIXED_STORAGE * 3 + self.hash_length

  def serialize(self):
    size_bytes = self.length.to_bytes(LedgerEntry.LENGTH_FIXED_STORAGE, byteorder="big")
    return size_bytes \
      + self.hash_length.to_bytes(LedgerEntry.LENGTH_FIXED_STORAGE, byteorder="big") \
      + self.prev_hash \
      + self.content \
      + size_bytes

  @staticmethod
  def from_stream(stream):
    """Reads the next ledger entry from the stream. If EOF, returns none."""
    reader = IOReader(stream)

    length = int.from_bytes(reader.read(LedgerEntry.LENGTH_FIXED_STORAGE), byteorder="big")
    hash_length = int.from_bytes(reader.read(LedgerEntry.LENGTH_FIXED_STORAGE), byteorder="big")
    prev_hash = reader.read(hash_length)
    content_length = length - hash_length - LedgerEntry.FIXED_STORAGE_SIZE
    content = reader.read(content_length)
    back_ref = int.from_bytes(reader.read(LedgerEntry.LENGTH_FIXED_STORAGE), byteorder="big")

    if reader.done():
      # At some point reading hit the EOF
      if length == 0:
        return None
      raise ValueError(
          "reading from stream results in incorrectly read entry: (%s, %s, %s, %s)"
          % (length, prev_hash, content, back_ref))
    if length != back_ref:
      raise Exception("Ledger entry length does not match backreference size, is the read offset correct?")
    return LedgerEntry(prev_hash, content)

  @staticmethod
  def last_from_stream(stream):
    """Assumes the stream is not already in position"""
    stream.seek(-4, 2) # seek to the last 4 bytes of the stream
    buf = stream.read(4)
    length = int.from_bytes(buf, byteorder="big")
    stream.seek(-length, 2)
    return LedgerEntry.from_stream(stream)


class IOReader(object):
  __slots__ = ["io", "eof"]
  def __init__(self, io):
    self.io = io
    self.eof = False

  def read(self, count):
    if self.eof:
      return b""
    buf = self.io.read(count)
    if len(buf) != count:
      self.eof = True
    return buf

  def done(self):
    return self.eof


def loader(name):
  """Helper function to pick input source."""
  if name == "-":
    return lambda opts: sys.stdin.detach()
  else:
    return lambda opts: open(name, opts)

def append(ledger, args):
  """'append' command"""
  content = args.content
  if content is None:
    if args.file == "-":
      raise ValueError("Standard input can not be used both for ledger & content input")
    content = utf8_bytes(sys.stdin.read())
  ledger.append(content, args.secret)

def validate(ledger, parsed_args):
  """'validate' command"""
  errors = ledger.validate(parsed_args.secret)
  for first, second in errors:
    sys.stdout.write("mismatch: (%s, %s)\n" %(first.prev_hash.hex(), second.prev_hash.hex()))
  if len(errors) > 0:
    return 1
  return 0

def utf8_bytes(val):
  return bytes(val, "utf8")

def parser(commands):
  p = argparse.ArgumentParser()
  p.add_argument("command", default=None, type=str, choices=commands)
  p.add_argument("--file", "-f", default=".ledger")
  p.add_argument("--hash", default="sha", help="Hash to use, one of: sha, hmac.")
  p.add_argument("--content", "-c", type=utf8_bytes, default=None, help="Only used for append")
  p.add_argument("--secret", "-s", type=utf8_bytes, default=None, help="Only used with --hash=hmac")
  return p

def main(args):
  cmds = {
    "init": lambda ledger, args: ledger.create(),
    "append": append,
    "validate": validate,
  }
  parsed_args = parser(cmds.keys()).parse_args(args)

  ledger = Ledger(loader(parsed_args.file), parsed_args.hash)

  rc = cmds[parsed_args.command](ledger, parsed_args)

  sys.exit(rc)

if __name__ == "__main__":
  main(sys.argv[1:])
